const mongoose = require('mongoose');
const Village = require('./models/Village');
const Building = require('./models/Building');
const gameLogic = require('./server/gameLogic');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const MONGO_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/cryptotribes';

async function debugResourceUpdate() {
    try {
        await mongoose.connect(MONGO_URI, { 
            useNewUrlParser: true, 
            useUnifiedTopology: true 
        });
        
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤\n');
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–µ—Ä–µ–≤–Ω–∏
        const villages = await Village.find().populate('user_id', 'username').lean();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –¥–µ—Ä–µ–≤–µ–Ω—å: ${villages.length}\n`);
        
        for (const village of villages) {
            console.log(`\nüìç –î–µ—Ä–µ–≤–Ω—è: ${village.name} (–í–ª–∞–¥–µ–ª–µ—Ü: ${village.user_id?.username || '–í–∞—Ä–≤–∞—Ä—ã'})`);
            console.log(`   ID: ${village._id}`);
            console.log(`   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (${village.x}, ${village.y})`);
            console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${village.last_update}`);
            
            // –¢–µ–∫—É—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã
            console.log(`\n   üí∞ –¢–µ–∫—É—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã:`);
            console.log(`      –î–µ—Ä–µ–≤–æ: ${village.wood}`);
            console.log(`      –ì–ª–∏–Ω–∞: ${village.clay}`);
            console.log(`      –ñ–µ–ª–µ–∑–æ: ${village.iron}`);
            console.log(`      –ï–¥–∞: ${village.food}`);
            
            // –ó–¥–∞–Ω–∏—è
            const buildings = await Building.find({ village_id: village._id }).lean();
            console.log(`\n   üèóÔ∏è –ó–¥–∞–Ω–∏—è:`);
            for (const building of buildings) {
                if (building.level > 0) {
                    console.log(`      ${building.building_type}: —É—Ä–æ–≤–µ–Ω—å ${building.level}`);
                }
            }
            
            // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
            console.log(`\n   üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã...`);
            try {
                const updated = await gameLogic.updateVillageResources(village);
                
                console.log(`\n   üìà –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤ —á–∞—Å:`);
                console.log(`      –î–µ—Ä–µ–≤–æ: ${updated.production.wood * 60}`);
                console.log(`      –ì–ª–∏–Ω–∞: ${updated.production.clay * 60}`);
                console.log(`      –ñ–µ–ª–µ–∑–æ: ${updated.production.iron * 60}`);
                console.log(`      –ï–¥–∞: ${updated.production.food * 60}`);
                
                console.log(`\n   üí∞ –ù–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã:`);
                console.log(`      –î–µ—Ä–µ–≤–æ: ${Math.floor(updated.wood)} (+${Math.floor(updated.wood - village.wood)})`);
                console.log(`      –ì–ª–∏–Ω–∞: ${Math.floor(updated.clay)} (+${Math.floor(updated.clay - village.clay)})`);
                console.log(`      –ñ–µ–ª–µ–∑–æ: ${Math.floor(updated.iron)} (+${Math.floor(updated.iron - village.iron)})`);
                console.log(`      –ï–¥–∞: ${Math.floor(updated.food)} (+${Math.floor(updated.food - village.food)})`);
                
                console.log(`\n   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!`);
                
            } catch (error) {
                console.error(`\n   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`);
            }
            
            console.log('\n' + '='.repeat(60));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–≤–∞—Ä—Å–∫–∏–µ –¥–µ—Ä–µ–≤–Ω–∏
        const barbarianVillages = villages.filter(v => !v.user_id);
        console.log(`\nüè¥‚Äç‚ò†Ô∏è –í–∞—Ä–≤–∞—Ä—Å–∫–∏—Ö –¥–µ—Ä–µ–≤–µ–Ω—å: ${barbarianVillages.length}`);
        
        if (barbarianVillages.length === 0) {
            console.log('\nüí° –°–æ–≤–µ—Ç: –°–æ–∑–¥–∞–π—Ç–µ –≤–∞—Ä–≤–∞—Ä—Å–∫–∏–µ –¥–µ—Ä–µ–≤–Ω–∏ –∫–æ–º–∞–Ω–¥–æ–π:');
            console.log('   POST /api/admin/generate-barbarians');
            console.log('   Body: { "count": 10 }');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await mongoose.disconnect();
        console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugResourceUpdate(); 