const mongoose = require('mongoose');
const Village = require('./models/Village');
const Building = require('./models/Building');
const gameLogic = require('./server/gameLogic');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const TEST_URI = 'mongodb://localhost:27017/cryptotribes';
mongoose.connect(TEST_URI, { useNewUrlParser: true, useUnifiedTopology: true });

async function testResourceUpdate() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤...');
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –¥–µ—Ä–µ–≤–Ω—é
        const village = await Village.findOne().lean();
        if (!village) {
            console.log('‚ùå –î–µ—Ä–µ–≤–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–µ—Ä–µ–≤–Ω—é —á–µ—Ä–µ–∑ –∏–≥—Ä—É.');
            return;
        }
        
        console.log(`üìç –ù–∞–π–¥–µ–Ω–∞ –¥–µ—Ä–µ–≤–Ω—è: ${village.name} (ID: ${village._id})`);
        console.log(`üìä –¢–µ–∫—É—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã:`);
        console.log(`   –î–µ—Ä–µ–≤–æ: ${village.wood}`);
        console.log(`   –ì–ª–∏–Ω–∞: ${village.clay}`);
        console.log(`   –ñ–µ–ª–µ–∑–æ: ${village.iron}`);
        console.log(`   –ï–¥–∞: ${village.food}`);
        console.log(`üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${village.last_update}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–∞–Ω–∏—è
        const buildings = await Building.find({ village_id: village._id }).lean();
        console.log(`üèóÔ∏è –ó–¥–∞–Ω–∏—è –≤ –¥–µ—Ä–µ–≤–Ω–µ:`);
        buildings.forEach(b => {
            console.log(`   ${b.building_type}: —É—Ä–æ–≤–µ–Ω—å ${b.level}`);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        console.log('\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã...');
        const updated = await gameLogic.updateVillageResources(village);
        
        console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:`);
        console.log(`   –î–µ—Ä–µ–≤–æ: ${updated.wood} (${updated.wood - village.wood > 0 ? '+' : ''}${updated.wood - village.wood})`);
        console.log(`   –ì–ª–∏–Ω–∞: ${updated.clay} (${updated.clay - village.clay > 0 ? '+' : ''}${updated.clay - village.clay})`);
        console.log(`   –ñ–µ–ª–µ–∑–æ: ${updated.iron} (${updated.iron - village.iron > 0 ? '+' : ''}${updated.iron - village.iron})`);
        console.log(`   –ï–¥–∞: ${updated.food} (${updated.food - village.food > 0 ? '+' : ''}${updated.food - village.food})`);
        
        console.log(`üìà –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤ —á–∞—Å:`);
        console.log(`   –î–µ—Ä–µ–≤–æ: ${updated.production.wood * 60}`);
        console.log(`   –ì–ª–∏–Ω–∞: ${updated.production.clay * 60}`);
        console.log(`   –ñ–µ–ª–µ–∑–æ: ${updated.production.iron * 60}`);
        console.log(`   –ï–¥–∞: ${updated.production.food * 60}`);
        
        console.log(`üì¶ –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∫–ª–∞–¥–∞: ${updated.capacity}`);
        console.log(`üïê –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updated.last_update}`);
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    } finally {
        await mongoose.disconnect();
        console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testResourceUpdate(); 