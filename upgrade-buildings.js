const mongoose = require('mongoose');
const Village = require('./models/Village');
const Building = require('./models/Building');
const gameLogic = require('./server/gameLogic');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const TEST_URI = 'mongodb://localhost:27017/cryptotribes';
mongoose.connect(TEST_URI, { useNewUrlParser: true, useUnifiedTopology: true });

async function upgradeBuildings() {
    try {
        console.log('üèóÔ∏è –£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞...');
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –¥–µ—Ä–µ–≤–Ω—é
        const village = await Village.findOne().lean();
        if (!village) {
            console.log('‚ùå –î–µ—Ä–µ–≤–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
            return;
        }
        
        console.log(`üìç –î–µ—Ä–µ–≤–Ω—è: ${village.name}`);
        
        // –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è
        const productionBuildings = ['farm', 'lumbercamp', 'clay_pit', 'iron_mine'];
        
        for (const buildingType of productionBuildings) {
            try {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
                await Village.updateOne(
                    { _id: village._id },
                    { 
                        wood: 10000, 
                        clay: 10000, 
                        iron: 10000, 
                        food: 10000 
                    }
                );
                
                // –£–ª—É—á—à–∞–µ–º –∑–¥–∞–Ω–∏–µ –¥–æ —É—Ä–æ–≤–Ω—è 1
                const building = await Building.findOne({ 
                    village_id: village._id, 
                    building_type: buildingType 
                });
                
                if (building && building.level === 0) {
                    await Building.updateOne(
                        { _id: building._id },
                        { level: 1 }
                    );
                    console.log(`‚úÖ ${buildingType} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è 1`);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è ${buildingType}:`, error);
            }
        }
        
        // –£–ª—É—á—à–∞–µ–º —Å–∫–ª–∞–¥
        try {
            await Building.updateOne(
                { village_id: village._id, building_type: 'warehouse' },
                { level: 1 }
            );
            console.log('‚úÖ –°–∫–ª–∞–¥ —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è 1');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞:', error);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
        const updatedVillage = await Village.findById(village._id).lean();
        const buildings = await Building.find({ village_id: village._id }).lean();
        
        console.log(`üèóÔ∏è –ó–¥–∞–Ω–∏—è:`);
        buildings.forEach(b => {
            console.log(`   ${b.building_type}: —É—Ä–æ–≤–µ–Ω—å ${b.level}`);
        });
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...');
        const result = await gameLogic.updateVillageResources(updatedVillage);
        
        console.log(`üìä –†–µ—Å—É—Ä—Å—ã:`);
        console.log(`   –î–µ—Ä–µ–≤–æ: ${result.wood}`);
        console.log(`   –ì–ª–∏–Ω–∞: ${result.clay}`);
        console.log(`   –ñ–µ–ª–µ–∑–æ: ${result.iron}`);
        console.log(`   –ï–¥–∞: ${result.food}`);
        
        console.log(`üìà –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤ —á–∞—Å:`);
        console.log(`   –î–µ—Ä–µ–≤–æ: ${result.production.wood * 60}`);
        console.log(`   –ì–ª–∏–Ω–∞: ${result.production.clay * 60}`);
        console.log(`   –ñ–µ–ª–µ–∑–æ: ${result.production.iron * 60}`);
        console.log(`   –ï–¥–∞: ${result.production.food * 60}`);
        
        console.log(`üì¶ –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∫–ª–∞–¥–∞: ${result.capacity}`);
        
        console.log('\n‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await mongoose.disconnect();
        console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
upgradeBuildings(); 